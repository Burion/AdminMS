@page "/instrument"
@page "/instrument/{Index}"
@using Musical_WebStore_BlazorApp.Shared
@inject CommentService commentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http


@if (instruments == null)
{
    <p><em>Loading instruments...</em></p>
}
else
{
    <div style="display:flex; flex-direction: row">
        <div style="width: 200px">
            <img class="card-img-top" src="guitar.jpg" alt="Card image cap">
        </div>
        <div>
            <h1>@instrument.Title</h1>
            <h1>@instrument.Price</h1>
            <h1>@instrument.Quantity</h1>
            <h1>@instrument.Description</h1>
            <h1>@instrument.TypeName</h1>
            <h1>@comments.Count</h1>
            
        </div>
    </div>
    <div>
    <EditForm Model="@commentModel" OnValidSubmit="@LeaveComment">
        <div class="form-group">
            <label for="email">Leave your comment here</label>
            <InputText id="email" class="form-control" @bind-Value="commentModel.Text" />
            <ValidationMessage For="@(() => commentModel.Text)" />
        </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
    <div>
    @foreach(var com in comments)
    {
        <div>
        <label>@com.Text</label>
        <label>@com.AuthorId</label>
        </div>
    }
    </div>
}
@code {
    List<Instrument> instruments;
    Instrument instrument;
    List<Comment> comments;
    [Parameter]
    public string Index { get; set; }
    CommentModel commentModel = new CommentModel();
    
    protected override async Task OnInitializedAsync()
    {
        comments = await Http.GetJsonAsync<List<Comment>>("api/Comments");
        instruments = await Http.GetJsonAsync<List<Instrument>>("api/Instruments");
        instrument = instruments.Single(i => i.Id == int.Parse(Index));
    }

    private async Task LeaveComment()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        commentModel.AuthorId = user.Identity.Name;
        var result = await commentService.LeaveComment(commentModel);
        await OnInitializedAsync();
    }
}