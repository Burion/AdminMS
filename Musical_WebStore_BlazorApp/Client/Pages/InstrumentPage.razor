@page "/instrument"
@page "/instrument/{Index}"
@using Musical_WebStore_BlazorApp.Shared
@inject CommentService commentService
@inject StarService starService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http


@if (instruments == null)
{
    <p><em>Loading instruments...</em></p>
}
else
{
    <div style="display:flex; flex-direction: row">
        <div style="width: 200px">
            <img href=# class="card-img-top pt-2" src="@instrument.Image" alt="Card image cap" style="height: 400px; width: auto;">
        </div>
        <div>
            <h1>@instrument.Title</h1>
            <h1>@instrument.Price</h1>
            <h1>@instrument.Quantity</h1>
            <h1>@instrument.Description</h1>
            <h1>@instrument.TypeName</h1>
            
        </div>
    </div>


@code{ 
    int[] list = new int[]{ 0, 1, 2, 3, 4 };
}
    <div>
    @foreach(var l in list)
    {
        <label id="@l" @onclick="@(() => LeaveStar(l + 1))">@starsSymbols[l]</label>
    }
    </div>

    @if(user.Identity.Name == null)
    {
        <p>Login to leave the comment.</p>
    }
    else
    {
    <div>
    <EditForm Model="@commentModel" OnValidSubmit="@LeaveComment">
        <div class="form-group">
            <label for="email">Leave your comment here</label>
            <InputText id="email" class="form-control" @bind-Value="commentModel.Text" />
            <ValidationMessage For="@(() => commentModel.Text)" />
        </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
    }
    <div>
    <div class="container">
	
    @foreach(var com in comments)
    {
        <div class="row">
		 <div class="media comment-box">
            <div class="media-left">
                <a href="#">
                    <img class="img-responsive user-photo" src="https://ssl.gstatic.com/accounts/ui/avatar_2x.png">
                </a>
            </div>
            <div class="media-body">
                <h4 class="media-heading">@com.User.UserId</h4>
               <AuthorizeView>
                    <Authorized>
                        @if (context.User.IsInRole("Admin") || com.Id == -1)
                        {
                            <button @onclick="@(() => DeleteComment(com.Id))">Delete</button>
                        }
                    </Authorized>
               </AuthorizeView>
                <p>@com.Text</p>
            </div>
        </div>
        </div>
    }
	
</div>
    </div>
}
@code {
    List<Instrument> instruments;
    Instrument instrument;
    List<Comment> comments;
    List<Star> stars;
    int mark;
    System.Security.Claims.ClaimsPrincipal user;
    [Parameter]
    public string Index { get; set; }
    CommentModel commentModel = new CommentModel();
    string[] starsSymbols = new string[5];
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        comments = await Http.GetJsonAsync<List<Comment>>("api/Comments");
        comments = comments.Where(c => c.InstrumentId == int.Parse(Index)).ToList();
        instruments = await Http.GetJsonAsync<List<Instrument>>("api/Instruments");
        instrument = instruments.Single(i => i.Id == int.Parse(Index));
        stars = await Http.GetJsonAsync<List<Star>>("api/Stars");
        if(stars.Count() != 0)
        {
            int sum = stars.Where(s => s.InstrumentId == int.Parse(Index)).Sum(star => star.Mark);
            int count = stars.Where(str => str.InstrumentId == int.Parse(Index)).Count();
            if(count != 0)
            {
                mark = sum/count;
            }   
            else
            {
                mark = 0;
            }
        }
        else
        {
            mark = 0;
        }

        
        for(int x = 0; x < 5; x++)
        {
            if(x < mark)
            {
                starsSymbols[x] = "★";
            }
            else
            {
                starsSymbols[x] = "☆";
            }
            
        }
        
    }

    private async Task LeaveComment()
    {
        commentModel.AuthorId = user.Identity.Name;
        commentModel.InstrumentId = int.Parse(Index);
        var result = await commentService.LeaveComment(commentModel);
        await OnInitializedAsync();
    }

    private async Task DeleteComment(int id)
    {
        var deleteCommentModel = new DeleteCommentModel() {CommentId = id};
        var result = await commentService.DeleteComment(deleteCommentModel);
        await OnInitializedAsync();
    }
    
    private async Task LeaveStar(int mark)
    {
        StarModel starModel = new StarModel() { Mark = mark };
        starModel.AuthorId = user.Identity.Name;
        starModel.InstrumentId = int.Parse(Index);
        var result = await starService.LeaveStar(starModel);
        await OnInitializedAsync();
    }
}