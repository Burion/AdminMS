// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musical_WebStore_BlazorApp.Server.Data;

namespace Musical_WebStore_BlazorApp.Server.Data.Migrations
{
    [DbContext(typeof(MusicalShopIdentityDbContext))]
    [Migration("20191112145713_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasDiscriminator<string>("TypeName").HasValue("Instrument");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Star", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stars");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Amplifier", b =>
                {
                    b.HasBaseType("Musical_WebStore_BlazorApp.Shared.Instrument");

                    b.HasDiscriminator().HasValue("Amplifier");

                    b.HasData(
                        new
                        {
                            Id = -21,
                            Description = "test desc1",
                            Image = "test.jpg",
                            Price = 1,
                            Quantity = 1,
                            Title = "amplifierTest1",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -22,
                            Description = "test desc2",
                            Image = "test.jpg",
                            Price = 2,
                            Quantity = 2,
                            Title = "amplifierTest2",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -23,
                            Description = "test desc3",
                            Image = "test.jpg",
                            Price = 3,
                            Quantity = 3,
                            Title = "amplifierTest3",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -24,
                            Description = "test desc4",
                            Image = "test.jpg",
                            Price = 4,
                            Quantity = 4,
                            Title = "amplifierTest4",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -25,
                            Description = "test desc5",
                            Image = "test.jpg",
                            Price = 5,
                            Quantity = 5,
                            Title = "amplifierTest5",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -26,
                            Description = "test desc6",
                            Image = "test.jpg",
                            Price = 6,
                            Quantity = 6,
                            Title = "amplifierTest6",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -27,
                            Description = "test desc7",
                            Image = "test.jpg",
                            Price = 7,
                            Quantity = 7,
                            Title = "amplifierTest7",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -28,
                            Description = "test desc8",
                            Image = "test.jpg",
                            Price = 8,
                            Quantity = 8,
                            Title = "amplifierTest8",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -29,
                            Description = "test desc9",
                            Image = "test.jpg",
                            Price = 9,
                            Quantity = 9,
                            Title = "amplifierTest9",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -30,
                            Description = "test desc10",
                            Image = "test.jpg",
                            Price = 10,
                            Quantity = 10,
                            Title = "amplifierTest10",
                            TypeName = "Amplifier"
                        });
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Guitar", b =>
                {
                    b.HasBaseType("Musical_WebStore_BlazorApp.Shared.Instrument");

                    b.HasDiscriminator().HasValue("Guitar");

                    b.HasData(
                        new
                        {
                            Id = -31,
                            Description = "test desc1",
                            Image = "test.jpg",
                            Price = 1,
                            Quantity = 1,
                            Title = "guitarTest1",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -32,
                            Description = "test desc2",
                            Image = "test.jpg",
                            Price = 2,
                            Quantity = 2,
                            Title = "guitarTest2",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -33,
                            Description = "test desc3",
                            Image = "test.jpg",
                            Price = 3,
                            Quantity = 3,
                            Title = "guitarTest3",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -34,
                            Description = "test desc4",
                            Image = "test.jpg",
                            Price = 4,
                            Quantity = 4,
                            Title = "guitarTest4",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -35,
                            Description = "test desc5",
                            Image = "test.jpg",
                            Price = 5,
                            Quantity = 5,
                            Title = "guitarTest5",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -36,
                            Description = "test desc6",
                            Image = "test.jpg",
                            Price = 6,
                            Quantity = 6,
                            Title = "guitarTest6",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -37,
                            Description = "test desc7",
                            Image = "test.jpg",
                            Price = 7,
                            Quantity = 7,
                            Title = "guitarTest7",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -38,
                            Description = "test desc8",
                            Image = "test.jpg",
                            Price = 8,
                            Quantity = 8,
                            Title = "guitarTest8",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -39,
                            Description = "test desc9",
                            Image = "test.jpg",
                            Price = 9,
                            Quantity = 9,
                            Title = "guitarTest9",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -40,
                            Description = "test desc10",
                            Image = "test.jpg",
                            Price = 10,
                            Quantity = 10,
                            Title = "guitarTest10",
                            TypeName = "Guitar"
                        });
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Pedal", b =>
                {
                    b.HasBaseType("Musical_WebStore_BlazorApp.Shared.Instrument");

                    b.HasDiscriminator().HasValue("Pedal");

                    b.HasData(
                        new
                        {
                            Id = -11,
                            Description = "test desc1",
                            Image = "test.jpg",
                            Price = 1,
                            Quantity = 1,
                            Title = "pedalTest1",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -12,
                            Description = "test desc2",
                            Image = "test.jpg",
                            Price = 2,
                            Quantity = 2,
                            Title = "pedalTest2",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -13,
                            Description = "test desc3",
                            Image = "test.jpg",
                            Price = 3,
                            Quantity = 3,
                            Title = "pedalTest3",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -14,
                            Description = "test desc4",
                            Image = "test.jpg",
                            Price = 4,
                            Quantity = 4,
                            Title = "pedalTest4",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -15,
                            Description = "test desc5",
                            Image = "test.jpg",
                            Price = 5,
                            Quantity = 5,
                            Title = "pedalTest5",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -16,
                            Description = "test desc6",
                            Image = "test.jpg",
                            Price = 6,
                            Quantity = 6,
                            Title = "pedalTest6",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -17,
                            Description = "test desc7",
                            Image = "test.jpg",
                            Price = 7,
                            Quantity = 7,
                            Title = "pedalTest7",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -18,
                            Description = "test desc8",
                            Image = "test.jpg",
                            Price = 8,
                            Quantity = 8,
                            Title = "pedalTest8",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -19,
                            Description = "test desc9",
                            Image = "test.jpg",
                            Price = 9,
                            Quantity = 9,
                            Title = "pedalTest9",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -20,
                            Description = "test desc10",
                            Image = "test.jpg",
                            Price = 10,
                            Quantity = 10,
                            Title = "pedalTest10",
                            TypeName = "Pedal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
